// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: token.sql

package repository

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (email, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, email, token, expires_at, created_at
`

type CreateTokenParams struct {
	Email     string    `json:"email"`
	Token     string    `json:"token"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken, arg.Email, arg.Token, arg.ExpiresAt)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredTokens = `-- name: DeleteExpiredTokens :exec
DELETE
FROM tokens
WHERE expires_at <= now()
`

func (q *Queries) DeleteExpiredTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredTokens)
	return err
}

const getTokenByToken = `-- name: GetTokenByToken :one
SELECT id, email, token, expires_at, created_at
FROM tokens
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetTokenByToken(ctx context.Context, token string) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByToken, token)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
