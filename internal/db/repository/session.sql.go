// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: session.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (id,
                      user_id,
                      access_token,
                      refresh_token,
                      user_agent,
                      client_ip,
                      is_blocked,
                      expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, access_token, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	AccessToken  string    `json:"access_token"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, access_token, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
FROM sessions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByAccessToken = `-- name: GetSessionByAccessToken :one
SELECT id, user_id, access_token, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
FROM sessions
WHERE access_token = $1
`

func (q *Queries) GetSessionByAccessToken(ctx context.Context, accessToken string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByAccessToken, accessToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionWithActiveRefreshToken = `-- name: GetSessionWithActiveRefreshToken :one
SELECT id, user_id, access_token, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
FROM sessions
WHERE refresh_token = $1
  AND is_blocked = false
  AND expires_at > now()
`

func (q *Queries) GetSessionWithActiveRefreshToken(ctx context.Context, refreshToken string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionWithActiveRefreshToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const listActiveSessions = `-- name: ListActiveSessions :many
SELECT id, user_id, access_token, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
FROM sessions
WHERE user_id = $1
  AND expires_at > now()
  AND is_blocked = false
ORDER BY access_token = $2, expires_at DESC
`

type ListActiveSessionsParams struct {
	UserID      uuid.UUID `json:"user_id"`
	AccessToken string    `json:"access_token"`
}

func (q *Queries) ListActiveSessions(ctx context.Context, arg ListActiveSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, listActiveSessions, arg.UserID, arg.AccessToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccessToken,
			&i.RefreshToken,
			&i.UserAgent,
			&i.ClientIp,
			&i.IsBlocked,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const terminateOtherSessions = `-- name: TerminateOtherSessions :exec
DELETE
FROM sessions
WHERE id <> $1
  AND user_id = $2
`

type TerminateOtherSessionsParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) TerminateOtherSessions(ctx context.Context, arg TerminateOtherSessionsParams) error {
	_, err := q.db.Exec(ctx, terminateOtherSessions, arg.ID, arg.UserID)
	return err
}

const terminateSingleSession = `-- name: TerminateSingleSession :exec
DELETE
FROM sessions
WHERE id = $1
  AND user_id = $2
`

type TerminateSingleSessionParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) TerminateSingleSession(ctx context.Context, arg TerminateSingleSessionParams) error {
	_, err := q.db.Exec(ctx, terminateSingleSession, arg.ID, arg.UserID)
	return err
}

const updateAccessToken = `-- name: UpdateAccessToken :one
UPDATE sessions
SET access_token = $2
WHERE id = $1
RETURNING id, user_id, access_token, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type UpdateAccessTokenParams struct {
	ID          uuid.UUID `json:"id"`
	AccessToken string    `json:"access_token"`
}

func (q *Queries) UpdateAccessToken(ctx context.Context, arg UpdateAccessTokenParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateAccessToken, arg.ID, arg.AccessToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
